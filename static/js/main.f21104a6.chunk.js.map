{"version":3,"sources":["avatar.jpeg","Panel.js","FlyPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PanelBody","_ref2","children","react_default","a","createElement","className","Children","map","child","cloneElement","props","length","Panel","_ref","fontAwesomeName","title","gridColumn","style","concat","USER","avatar","FlyPanel","src_Panel_0","Panel_PanelBody","src","alt","rows","App","src_FlyPanel_0","marginTop","marginRight","color","margin","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6NCa3BC,eAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZC,WAASC,IAAIN,EAAU,SAAAO,GAAK,OACzBC,uBAAaD,EAAO,CAClBH,UAAWG,EAAME,MAAML,UAAUM,OAAS,EAC1CH,EAAME,MAAML,UAAY,eACxB,qBAMKO,EAtBD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,gBAAiBC,EAApBF,EAAoBE,MAAOC,EAA3BH,EAA2BG,WAAYf,EAAvCY,EAAuCZ,SAAvC,OACZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQY,MAAO,CAAED,WAAA,GAAAE,OAAiBF,EAAjB,eAC9Bd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAa,OAAKJ,EAAL,iBACZZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeU,IAE5Bd,4BCJDkB,GACIC,IACF,UAkBOC,EAfE,kBACfnB,EAAAC,EAAAC,cAACkB,EAAD,CAAOR,gBAAgB,qBAAqBC,MAAM,MAAMC,WAAW,KACjEd,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASmB,IAAKJ,IAAQK,IAAI,WACzCvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAKe,KAGTjB,EAAAC,EAAAC,cAAA,YAAUC,UAAU,WAAWqB,KAAK,OACpCxB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAlB,mBCeSsB,MA/Bf,WACE,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQY,MAAO,CAAED,WAAc,eAC5Cd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGa,MAAO,CAAEY,UAAW,KAAMC,YAAa,MAAQzB,UAAU,sBAC5DH,EAAAC,EAAAC,cAAA,MAAIa,MAAO,CAAEc,MAAO,QAASC,OAAQ,IAArC,UAGJ9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQY,MAAO,CAAED,WAAc,eAC5Cd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGa,MAAO,CAAEY,UAAW,KAAMC,YAAa,MAAQzB,UAAU,oBAC5DH,EAAAC,EAAAC,cAAA,MAAIa,MAAO,CAAEc,MAAO,QAASC,OAAQ,IAArC,WAGJ9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQY,MAAO,CAAED,WAAc,eAC5Cd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGa,MAAO,CAAEY,UAAW,KAAMC,YAAa,MAAQzB,UAAU,2BAC5DH,EAAAC,EAAAC,cAAA,MAAIa,MAAO,CAAEc,MAAO,QAASC,OAAQ,IAArC,cCfQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f21104a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.99ed5701.jpeg\";","import React, { Children, cloneElement } from 'react';\nimport './Panel.css'\n\nconst Panel = ({ fontAwesomeName, title, gridColumn, children }) => (\n  <div className='panel' style={{ 'gridColumn': `${gridColumn} / span 1` }}>\n    <div className='panel-title'>\n      <i className={`${fontAwesomeName} panel-icon`}></i>\n      <h2 className='panel-title'>{title}</h2>\n    </div>\n      {children}\n  </div>\n);\n\nexport const PanelBody = ({ children }) => (\n  <div className='panel-body'>\n    {Children.map(children, child => (\n        cloneElement(child, {\n          className: child.props.className.length > 0 ?\n          child.props.className + ' panel-child' :\n          'panel-child'\n        }))\n      )}\n  </div>\n);\n\nexport default Panel;\n\n","import React from 'react';\nimport Panel, { PanelBody } from './Panel.js';\nimport './FlyPanel.css'\nimport avatar from './avatar.jpeg';\n\nconst USER = {\n  avatar: avatar,\n  name: 'Carlos'\n};\n\nconst FlyPanel = () => (\n  <Panel fontAwesomeName=\"fas fa-feather-alt\" title='fly' gridColumn='2'>\n    <PanelBody>\n      <div className='avatar'>\n        <img className='avatar' src={avatar} alt='avatar' />\n        <div className='avatar-name'>\n          <h3>{USER.name}</h3>\n        </div>\n      </div>\n      <textarea className='flypanel' rows=\"10\" />\n      <button className='flypanel'>submit</button>\n    </PanelBody>\n  </Panel>\n);\n\nexport default FlyPanel;\n","import React from 'react';\nimport FlyPanel from './FlyPanel.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>birdhouse</h1>\n      </header>\n      <div className='container'>\n        <FlyPanel />\n        <div className='panel' style={{ 'gridColumn': '4 / span 1' }}>\n          <div className='panel-title'>\n            <i style={{ marginTop: '3%', marginRight: '5%' }} className=\"fas fa-align-left\"></i>\n            <h2 style={{ color: 'white', margin: 0 }}>feed</h2>\n          </div>\n        </div>\n        <div className='panel' style={{ 'gridColumn': '6 / span 1' }}>\n          <div className='panel-title'>\n            <i style={{ marginTop: '3%', marginRight: '5%' }} className=\"fas fa-comments\"></i>\n            <h2 style={{ color: 'white', margin: 0 }}>chirp</h2>\n          </div>\n        </div>\n        <div className='panel' style={{ 'gridColumn': '8 / span 1' }}>\n          <div className='panel-title'>\n            <i style={{ marginTop: '3%', marginRight: '5%' }} className=\"fas fa-broadcast-tower\"></i>\n            <h2 style={{ color: 'white', margin: 0 }}>roost</h2>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}